üìÅ src/Components/Login.jsx
import React, { useState } from 'react';
import './Login.css';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState({});

  const handleLogin = (e) => {
    e.preventDefault();
    let tempErrors = {};

    if (!email) tempErrors.email = 'Email is required';
    if (!password) tempErrors.password = 'Password is required';

    setErrors(tempErrors);
  };

  return (
    <div className="login-container">
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <label>Email:</label>
        <input type="text" value={email} onChange={(e) => setEmail(e.target.value)} />

        {errors.email && <p className="error">{errors.email}</p>}

        <label>Password:</label>
        <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />

        {errors.password && <p className="error">{errors.password}</p>}

        <button type="submit">Login</button>
      </form>
    </div>
  );
}

export default Login;

üìÅ src/Components/Login.css
.login-container {
  text-align: center;
  margin: 30px auto;
  width: 300px;
}
.error {
  color: red;
  font-size: 0.9rem;
}

üìÅ src/Components/Register.jsx
import React, { useState } from 'react';
import './Register.css';

function Register() {
  const [form, setForm] = useState({
    firstName: '',
    lastName: '',
    mobile: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    let tempErrors = {};

    if (!form.firstName) tempErrors.firstName = 'First Name is required';
    if (!form.lastName) tempErrors.lastName = 'Last Name is required';
    if (!form.mobile) tempErrors.mobile = 'Mobile Number is required';
    if (!form.email) tempErrors.email = 'Please enter a valid email address';
    if (!form.password || form.password.length < 6)
      tempErrors.password = 'Password must be at least 6 characters';
    if (!form.confirmPassword)
      tempErrors.confirmPassword = 'Confirm Password is required';

    setErrors(tempErrors);
  };

  return (
    <div className="register-container">
      <h2>Register for SavorStudio</h2>
      <form onSubmit={handleSubmit}>
        <input name="firstName" placeholder="First Name" onChange={handleChange} />
        {errors.firstName && <p className="error">{errors.firstName}</p>}

        <input name="lastName" placeholder="Last Name" onChange={handleChange} />
        {errors.lastName && <p className="error">{errors.lastName}</p>}

        <input name="mobile" placeholder="Mobile Number" onChange={handleChange} />
        {errors.mobile && <p className="error">{errors.mobile}</p>}

        <input name="email" placeholder="Email" onChange={handleChange} />
        {errors.email && <p className="error">{errors.email}</p>}

        <input name="password" type="password" placeholder="Password" onChange={handleChange} />
        {errors.password && <p className="error">{errors.password}</p>}

        <input name="confirmPassword" type="password" placeholder="Confirm Password" onChange={handleChange} />
        {errors.confirmPassword && <p className="error">{errors.confirmPassword}</p>}

        <button type="submit">Register</button>
      </form>
    </div>
  );
}

export default Register;

üìÅ src/Components/Register.css
.register-container {
  text-align: center;
  margin: 30px auto;
  width: 350px;
}
.error {
  color: red;
  font-size: 0.9rem;
}

üìÅ src/Components/ErrorPage.jsx
import React from 'react';
import './ErrorPage.css';

function ErrorPage() {
  return (
    <div className="error-page">
      <h2>Something Went Wrong</h2>
      <p>We're sorry, but an error occurred. Please try again later.</p>
    </div>
  );
}

export default ErrorPage;

üìÅ src/Components/ErrorPage.css
.error-page {
  text-align: center;
  margin-top: 50px;
  color: red;
}

üìÅ src/Viewers/DisplayTVShows.jsx
import React from 'react';

function DisplayTVShows() {
  return (
    <div>
      <h2>TV Show Catalog</h2>
      <button>Logout</button>

      <select defaultValue="Sort by Title (A-Z)">
        <option>Sort by Title (A-Z)</option>
        <option>Sort by Title (Z-A)</option>
      </select>

      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Genre</th>
            <th>Status</th>
            <th>Progress</th>
            <th>Rating</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colSpan="6">No TV shows found</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}

export default DisplayTVShows;

üìÅ src/Admin/ManageTVShow.jsx
import React from 'react';
import './ManageTVShow.css';

function ManageTVShow() {
  return (
    <div>
      <h2>Manage TV Shows</h2>
      <button>Add TV Show</button>
      <button>Logout</button>

      <select defaultValue="All Statuses">
        <option>All Statuses</option>
        <option>Watching</option>
        <option>Completed</option>
        <option>Planned</option>
      </select>

      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Genre</th>
            <th>Status</th>
            <th>Progress</th>
            <th>Rating</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colSpan="6">No TV shows found</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}

export default ManageTVShow;

üìÅ src/Admin/ManageTVShow.css
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}
th, td {
  border: 1px solid #ddd;
  padding: 8px;
}

üìÅ src/Admin/CreateTVShow.jsx
import React, { useState } from 'react';
import './CreateTVShow.css';

function CreateTVShow() {
  const [form, setForm] = useState({
    title: '',
    genre: '',
    status: '',
    totalEpisodes: '',
    watchedEpisodes: '',
    rating: ''
  });
  const [errors, setErrors] = useState({});

  const handleSubmit = (e) => {
    e.preventDefault();
    let tempErrors = {};

    if (!form.title) tempErrors.title = 'Title is required';
    if (!form.genre) tempErrors.genre = 'Genre is required';
    if (!form.totalEpisodes || form.totalEpisodes < 1)
      tempErrors.totalEpisodes = 'Total episodes must be at least 1';

    setErrors(tempErrors);
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  return (
    <div>
      <h2>Add TV Show</h2>
      <form onSubmit={handleSubmit}>
        <label>Title:</label>
        <input name="title" onChange={handleChange} />
        {errors.title && <p className="error">{errors.title}</p>}

        <label>Genre:</label>
        <input name="genre" onChange={handleChange} />
        {errors.genre && <p className="error">{errors.genre}</p>}

        <label>Status:</label>
        <input name="status" onChange={handleChange} />

        <label>Total Episodes:</label>
        <input type="number" name="totalEpisodes" onChange={handleChange} />
        {errors.totalEpisodes && <p className="error">{errors.totalEpisodes}</p>}

        <label>Watched Episodes:</label>
        <input type="number" name="watchedEpisodes" onChange={handleChange} />

        <label>Rating (1-10, optional):</label>
        <input type="number" name="rating" onChange={handleChange} />

        <button type="submit">Add TV Show</button>
      </form>
    </div>
  );
}

export default CreateTVShow;

üìÅ src/Admin/CreateTVShow.css
.error {
  color: red;
  font-size: 0.9rem;
}
form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  width: 300px;
  margin: 20px auto;
}


// index.js (React)
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

#BACKEND




üü¢ index.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

// Import routes
const tvShowRouter = require('./routers/tvShowRouter');
const userRouter = require('./routers/userRouter');

// Initialize app
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/tvshows', tvShowRouter);
app.use('/api/users', userRouter);

// Default route
app.get('/', (req, res) => {
  res.send('üì∫ Library API is running...');
});

// MongoDB connection (no dotenv)
const PORT = process.env.PORT || 5000;
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/librarydb';

mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ MongoDB connected successfully'))
.catch((err) => console.error('‚ùå MongoDB connection error:', err));

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});


üü† authUtils.js
const jwt = require('jsonwebtoken');

exports.validateToken = (req, res, next) => {
  const token = req.header('Authorization');
  if (!token) return res.status(400).json({ message: 'Authentication failed' });

  try {
    jwt.verify(token, process.env.JWT_SECRET || 'secret');
    next();
  } catch (error) {
    return res.status(400).json({ message: 'Authentication failed' });
  }
};

üü£ models/userModel.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  firstName: {
    type: String,
    required: true,
    trim: true
  },
  lastName: {
    type: String,
    required: true,
    trim: true
  },
  email: {
    type: String,
    required: true,
    validate: {
      validator: function (value) {
        // ‚úÖ basic email check: must contain '@' and '.'
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
      },
      message: 'Invalid email format'
    }
  },
  mobileNumber: {
    type: String,
    required: true,
    validate: {
      validator: function (value) {
        // ‚úÖ must be exactly 10 digits
        return /^[0-9]{10}$/.test(value);
      },
      message: 'Invalid mobile number format'
    }
  },
  password: {
    type: String,
    required: true,
    minlength: 8,
    maxlength: 15
  }
});

module.exports = mongoose.model('User', userSchema);





üü£ models/tvShowModel.js
const mongoose = require('mongoose');

const tvShowSchema = new mongoose.Schema({
  title: { type: String, required: true, maxlength: 150 },
  genre: {
    type: String,
    enum: ['Drama', 'Comedy', 'Action', 'Sci-Fi', 'Thriller', 'Horror'],
    required: true
  },
  status: {
    type: String,
    enum: ['Completed', 'Currently Watching', 'Plan to Watch', 'Dropped'],
    required: true
  },
  totalEpisodes: { type: Number, required: true, min: 0 },
  watchedEpisodes: {
    type: Number,
    required: true,
    min: [0, 'Watched episodes cannot be negative']
  },
  rating: { type: Number, min: 0, max: 10, required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }
});

module.exports = mongoose.model('TVShow', tvShowSchema);

üü¢ controllers/userController.js
const User = require('../models/userModel');

exports.addUser = async (req, res) => {
  try {
    await User.create(req.body);
    res.status(200).json({ message: 'Success' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json({ users });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.getUserByUsernameAndPassword = async (req, res) => {
  try {
    const user = await User.findOne(req.body);
    if (!user) return res.status(200).json({ message: 'Invalid Credentials' });
    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

üü¢ controllers/tvShowController.js
const TVShow = require('../models/tvShowModel');

exports.getAllTVShows = async (req, res) => {
  try {
    const shows = await TVShow.find().sort({ title: req.body.sortOrder });
    res.status(200).json(shows);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.addTVShow = async (req, res) => {
  try {
    await TVShow.create(req.body);
    res.status(200).json({ message: 'TV Show Added Successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.updateTVShow = async (req, res) => {
  try {
    const updated = await TVShow.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updated) return res.status(404).json({ message: 'TV show not found' });
    res.status(200).json({ message: 'TV Show Updated Successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.deleteTVShow = async (req, res) => {
  try {
    const deleted = await TVShow.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: 'TV show not found' });
    res.status(200).json({ message: 'TV Show Deleted Successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.getTVShowById = async (req, res) => {
  try {
    const show = await TVShow.findById(req.params.id);
    if (!show) return res.status(404).json({ message: 'TV show not found' });
    res.status(200).json(show);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.getTVShowsByUserId = async (req, res) => {
  try {
    const shows = await TVShow.find({ userId: req.body.userId, status: req.body.status });
    res.status(200).json(shows);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

üü° routers/userRouter.js
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');

router.post('/add', userController.addUser);
router.get('/', userController.getAllUsers);
router.post('/login', userController.getUserByUsernameAndPassword);

module.exports = router;

üü° routers/tvShowRouter.js
const express = require('express');
const router = express.Router();
const tvShowController = require('../controllers/tvShowController');
const { validateToken } = require('../authUtils');

// Protected routes
router.post('/', validateToken, tvShowController.addTVShow);
router.get('/', validateToken, tvShowController.getAllTVShows);
router.get('/:id', validateToken, tvShowController.getTVShowById);
router.put('/:id', validateToken, tvShowController.updateTVShow);
router.delete('/:id', validateToken, tvShowController.deleteTVShow);
router.post('/user', validateToken, tvShowController.getTVShowsByUserId);

module.exports = router;






